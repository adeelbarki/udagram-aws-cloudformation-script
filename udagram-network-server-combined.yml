Description: >
    Adeel Barki / Udacity
    This template deploys a udagram project network and also autoscale servers in high availability zone. Web app project files are accessed from s3 bucket.
Parameters:

    EnvironmentName:
        Description: Udagram Project / Udacity
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this public subnet 1
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this public subnet 2
        Type: String
        Default: 10.0.1.0/24

    PublicSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for this public subnet 3
        Type: String
        Default: 10.0.2.0/24

    PublicSubnet4CIDR:
        Description: Please enter the IP range (CIDR notation) for this public subnet 4
        Type: String
        Default: 10.0.3.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for this private subnet 1
        Type: String
        Default: 10.0.4.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for this private subnet 2
        Type: String
        Default: 10.0.5.0/24

    PrivateSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for this private subnet 3
        Type: String
        Default: 10.0.6.0/24

    PrivateSubnet4CIDR:
        Description: Please enter the IP range (CIDR notation) for this private subnet 4
        Type: String
        Default: 10.0.7.0/24

Resources:
# ---------------- Network Configuration------------------------------------------

    UVPC:
        Type: AWS::EC2::VPC
        Properties: 
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref UVPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PublicSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet3CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

    PublicSubnet4:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet4CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ4)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    PrivateSubnet3:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet3CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

    PrivateSubnet4:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UVPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet4CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ4)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway3EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway4EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    NatGateway3:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway3EIP.AllocationId
            SubnetId: !Ref PublicSubnet3

    NatGateway4:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway4EIP.AllocationId
            SubnetId: !Ref PublicSubnet4

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PublicSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet3

    PublicSubnet4RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet4

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ3)

    DefaultPrivateRoute3:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway3

    PrivateSubnet3RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable3
            SubnetId: !Ref PrivateSubnet3

    PrivateRouteTable4:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ4)

    DefaultPrivateRoute4:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable4
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway4

    PrivateSubnet4RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable4
            SubnetId: !Ref PrivateSubnet4

#---------------------Server Configuration --------------------------------------
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our loud balancer
            VpcId: !Ref 'UVPC'
            SecurityGroupIngress: 
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 8080
                ToPort: 8080
                CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId: !Ref 'UVPC'
            SecurityGroupIngress: 
              -   IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
              -   IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
              -   IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    UdagramS3ReadOnlyEC2:
            Type: AWS::IAM::Role
            Properties:
                ManagedPolicyArns:
                -   "arn:aws:iam::aws:policy/AmazonS3FullAccess"
                AssumeRolePolicyDocument: {
                    "Version" : "2012-10-17",
                    "Statement": [
                        {
                        "Effect": "Allow",
                        "Principal": {
                          "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                      }
                    ]
                }

    S3ReadOnlyPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [ "s3:List" ],
                        "Resource": "*"
                    }
                ]
            }
            PolicyName: S3bucketPolicy
            Roles:
              -   Ref: UdagramS3ReadOnlyEC2

    InstanceProfileForUdagram:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles:
              -   Ref: UdagramS3ReadOnlyEC2

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                apt-get update -y
                apt-get install unzip awscli -y
                apt-get install apache2 -y
                systemctl start apache2.service
                cd /var/www/html
                aws s3 cp s3://udacity-udagram-adeel/udacity.zip .
                unzip -o udacity.zip
            ImageId: ami-0ac05733838eabc06
            IamInstanceProfile: 
                Ref: InstanceProfileForUdagram
            SecurityGroups:
              -    Ref: WebServerSecGroup
            InstanceType: t3.medium
            BlockDeviceMappings:
              -    DeviceName: "/dev/sdk"
                   Ebs:
                       VolumeSize: '10'
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Ref: "PrivateSubnet1"
                - Ref: "PrivateSubnet2"
                - Ref: "PrivateSubnet3"
                - Ref: "PrivateSubnet4"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '4'
            TargetGroupARNs:
              - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - Ref: PublicSubnet1
                - Ref: PublicSubnet2
            SecurityGroups:
              - Ref: LBSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
              - Type: forward
                TargetGroupArn:
                    Ref: WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
              - Type: forward
                TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
              - Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref 'UVPC'

#-----------------------Outputs-------------------------------------------------

Outputs:
    UVPC:
        Description: A reference to the created VPC
        Value: !Ref UVPC
        Export:
            Name: !Sub ${EnvironmentName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
            Name: !Sub ${EnvironmentName}-PUB-RT

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
            Name: !Sub ${EnvironmentName}-PRI1-RT

    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
            Name: !Sub ${EnvironmentName}-PRI2-RT

    VPCPrivateRouteTable3:
        Description: Private Routing AZ3
        Value: !Ref PrivateRouteTable3
        Export:
            Name: !Sub ${EnvironmentName}-PRI3-RT

    VPCPrivateRouteTable4:
        Description: Private Routing AZ4
        Value: !Ref PrivateRouteTable4
        Export:
            Name: !Sub ${EnvironmentName}-PRI4-RT

    PublicSubnets:
        Description: A list of public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4 ]]
        Export:
            Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4 ]]
        Export:
            Name: !Sub ${EnvironmentName}-PRIV-NETS

    PublicSubnet1:
        Description: A reference to the public subnet in the first available
        Value: !Ref PublicSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PUB1-SN

    PublicSubnet2:
        Description: A reference to the public subnet in the first available subnet
        Value: !Ref PublicSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PUB2-SN

    PublicSubnet3:
        Description: A reference to the public subnet in the first available
        Value: !Ref PublicSubnet3
        Export:
            Name: !Sub ${EnvironmentName}-PUB3-SN

    PublicSubnet4:
        Description: A reference to the public subnet in the first available subnet
        Value: !Ref PublicSubnet4
        Export:
            Name: !Sub ${EnvironmentName}-PUB4-SN

    PrivateSubnet1:
        Description: A reference to the public subnet in the first available
        Value: !Ref PrivateSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PRI1-SN
    
    PrivateSubnet2:
        Description: A reference to the public subnet in the first available
        Value: !Ref PrivateSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PRI2-SN

    PrivateSubnet3:
        Description: A reference to the public subnet in the first available
        Value: !Ref PrivateSubnet3
        Export:
            Name: !Sub ${EnvironmentName}-PRI3-SN
    
    PrivateSubnet4:
        Description: A reference to the public subnet in the first available
        Value: !Ref PrivateSubnet4
        Export:
            Name: !Sub ${EnvironmentName}-PRI4-SN

    WebAppLoadBalancerDNSName:
        Description: Adding http to the beginning of load balancer DNS Name
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName
